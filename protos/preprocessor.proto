syntax = "proto2";
package protos;

import "protos/label_map.proto";


message PreprocessingStep {
  oneof preprocessing_step {
    ResizeImageRandomMethod resize_image_random_method = 1;
    ResizeImage resize_image = 2;
    NormalizeImage normalize_image = 3;
    RandomPixelValueScale random_pixel_value_scale = 4;
    RandomRgbToGray random_rgb_to_gray = 5;
    RandomAdjustBrightness random_adjust_brightness = 6;
    RandomAdjustContrast random_adjust_contrast = 7;
    RandomAdjustHue random_adjust_hue = 8;
    RandomAdjustSaturation random_adjust_saturation = 9;
    RandomDistortColor random_distort_color = 10;
    ImageToFloat image_to_float = 11;
    SubtractChannelMean subtract_channel_mean = 12;
    RgbToGray rgb_to_gray = 13;
    StringFiltering string_filtering = 14;
  }
}

message ResizeImageRandomMethod {
  optional int32 target_height = 1 [default=512];
  optional int32 target_width  = 2 [default=512];
}

message ResizeImage {
  enum Method {
    AREA=1;
    BICUBIC=2;
    BILINEAR=3;
    NEAREST_NEIGHBOR=4;
  }
  optional int32 target_height = 1 [default=512];
  optional int32 target_width  = 2 [default=512];
  optional Method method       = 3 [default=BILINEAR];
}

message NormalizeImage {
  optional float original_minval = 1;
  optional float original_maxval = 2;
  optional float target_minval = 3 [default=0];
  optional float target_maxval = 4 [default=1];
}

message RandomPixelValueScale {
  optional float minval = 1 [default=0.9];
  optional float maxval = 2 [default=1.1];
}

message RandomRgbToGray {
  optional float probability = 1 [default=0.1];
}

message RandomAdjustBrightness {
  optional float max_delta=1 [default=0.2];
}

message RandomAdjustContrast {
  optional float min_delta = 1 [default=0.8];
  optional float max_delta = 2 [default=1.25];
}

message RandomAdjustHue {
  optional float max_delta = 1 [default=0.02];
}

message RandomAdjustSaturation {
  optional float min_delta = 1 [default=0.8];
  optional float max_delta = 2 [default=1.25];
}

message RandomDistortColor {
  optional int32 color_ordering = 1;
}

message ImageToFloat {
}

message SubtractChannelMean {
  // The mean to subtract from each channel. Should be of same dimension of
  // channels in the input image.
  repeated float means = 1;
}

message RgbToGray {
  optional bool three_channels = 1 [default=false];
}

message StringFiltering {
  optional bool lower_case = 1 [default=false];
  optional CharacterSet include_charset = 2;
}
